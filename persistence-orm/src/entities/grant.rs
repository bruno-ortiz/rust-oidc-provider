//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.11

use super::sea_orm_active_enums::Status;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "grant")]
pub struct Model {
    #[sea_orm(
        primary_key,
        auto_increment = false,
        column_type = "Binary(BlobSize::Blob(Some(16)))"
    )]
    pub id: Vec<u8>,
    pub status: Status,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(Some(16)))")]
    pub client_id: Vec<u8>,
    pub subject: String,
    pub auth_time: TimeDateTime,
    pub max_age: Option<i64>,
    pub redirect_uri: Option<String>,
    pub scopes: Option<String>,
    pub acr: String,
    pub amr: Option<String>,
    pub claims: Option<Json>,
    pub rejected_claims: Json,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::authenticated_user::Entity")]
    AuthenticatedUser,
    #[sea_orm(has_many = "super::authorization_code::Entity")]
    AuthorizationCode,
    #[sea_orm(
        belongs_to = "super::client_information::Entity",
        from = "Column::ClientId",
        to = "super::client_information::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    ClientInformation,
    #[sea_orm(has_many = "super::token::Entity")]
    Token,
}

impl Related<super::authenticated_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AuthenticatedUser.def()
    }
}

impl Related<super::authorization_code::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AuthorizationCode.def()
    }
}

impl Related<super::client_information::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ClientInformation.def()
    }
}

impl Related<super::token::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Token.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
